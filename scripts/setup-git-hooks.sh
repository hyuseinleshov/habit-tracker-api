#!/bin/bash

# setup-git-hooks.sh
# Automated script to install Git hooks for the Habit Tracker API project
# This script sets up a pre-commit hook that automatically formats code with Spotless

set -e  # Exit on error

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}================================================${NC}"
echo -e "${BLUE}  Git Hooks Setup - Habit Tracker API${NC}"
echo -e "${BLUE}================================================${NC}"
echo ""

# Check if we're in the project root
if [ ! -f "build.gradle" ] || [ ! -d ".git" ]; then
    echo -e "${RED}‚ùå Error: This script must be run from the project root directory${NC}"
    echo -e "${YELLOW}   (The directory containing build.gradle and .git/)${NC}"
    exit 1
fi

echo -e "${BLUE}üìç Current directory:${NC} $(pwd)"
echo ""

# Check if Gradle wrapper exists
if [ ! -f "gradlew" ]; then
    echo -e "${RED}‚ùå Error: gradlew not found. Is this a Gradle project?${NC}"
    exit 1
fi

# Create hooks directory if it doesn't exist (shouldn't happen, but just in case)
if [ ! -d ".git/hooks" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Creating .git/hooks directory...${NC}"
    mkdir -p .git/hooks
fi

# Backup existing pre-commit hook if it exists
if [ -f ".git/hooks/pre-commit" ]; then
    BACKUP_FILE=".git/hooks/pre-commit.backup.$(date +%Y%m%d_%H%M%S)"
    echo -e "${YELLOW}‚ö†Ô∏è  Existing pre-commit hook found${NC}"
    echo -e "${YELLOW}   Creating backup: ${BACKUP_FILE}${NC}"
    cp .git/hooks/pre-commit "$BACKUP_FILE"
    echo ""
fi

# Create the pre-commit hook
echo -e "${BLUE}üìù Creating pre-commit hook...${NC}"

cat > .git/hooks/pre-commit << 'EOF'
#!/bin/sh
# Pre-commit hook to auto-format Java code with Spotless
# Auto-generated by setup-git-hooks.sh

echo "üîç Running Spotless auto-formatter..."

# Run Spotless formatter
./gradlew spotlessApply --daemon --quiet

# Check if Spotless made any changes
if ! git diff --quiet; then
    echo "‚ú® Code formatted successfully"
    # Stage the formatted files
    git add -u
    echo "üìù Formatted files added to commit"
else
    echo "‚úÖ Code already properly formatted"
fi

exit 0
EOF

# Make the hook executable
chmod +x .git/hooks/pre-commit

echo -e "${GREEN}‚úÖ Pre-commit hook created successfully${NC}"
echo ""

# Verify installation
echo -e "${BLUE}üîç Verifying installation...${NC}"

if [ -x ".git/hooks/pre-commit" ]; then
    echo -e "${GREEN}‚úÖ Hook is executable${NC}"
else
    echo -e "${RED}‚ùå Hook is not executable${NC}"
    exit 1
fi

# Show hook contents
echo ""
echo -e "${BLUE}üìÑ Hook contents:${NC}"
echo -e "${YELLOW}-----------------------------------${NC}"
cat .git/hooks/pre-commit
echo -e "${YELLOW}-----------------------------------${NC}"
echo ""

# Test Spotless availability
echo -e "${BLUE}üß™ Testing Spotless availability...${NC}"
if ./gradlew spotlessCheck --quiet > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Spotless is working${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Spotless check failed (might be normal if code needs formatting)${NC}"
fi

echo ""
echo -e "${GREEN}================================================${NC}"
echo -e "${GREEN}  ‚ú® Setup Complete!${NC}"
echo -e "${GREEN}================================================${NC}"
echo ""
echo -e "${BLUE}What happens now?${NC}"
echo "  ‚Ä¢ Every time you commit, code will be auto-formatted"
echo "  ‚Ä¢ No more CI failures due to formatting issues"
echo "  ‚Ä¢ Consistent code style across the team"
echo ""
echo -e "${BLUE}Useful commands:${NC}"
echo "  ‚Ä¢ Test manually:     ./gradlew spotlessApply"
echo "  ‚Ä¢ Check formatting:  ./gradlew spotlessCheck"
echo "  ‚Ä¢ Skip hook once:    git commit --no-verify"
echo "  ‚Ä¢ Remove hook:       rm .git/hooks/pre-commit"
echo ""
echo -e "${BLUE}üìö For more info, see:${NC} docs/GIT_HOOKS_GUIDE.md"
echo ""